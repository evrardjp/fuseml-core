// Code generated by goa v3.3.1, DO NOT EDIT.
//
// codeset service
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package codeset

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The codeset service performs operations on Codesets.
type Service interface {
	// Retrieve information about Codesets registered in FuseML.
	List(context.Context, *ListPayload) (res []*Codeset, err error)
	// Register a Codeset with the FuseML codeset store.
	Register(context.Context, *RegisterPayload) (res *Codeset, err error)
	// Retrieve an Codeset from FuseML.
	Get(context.Context, *GetPayload) (res *Codeset, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "codeset"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"list", "register", "get"}

// ListPayload is the payload type of the codeset service list method.
type ListPayload struct {
	// List only Codesets that belong to given project
	Project *string
	// List only Codesets with matching label
	Label *string
}

// RegisterPayload is the payload type of the codeset service register method.
type RegisterPayload struct {
	// Codeset descriptor
	Codeset *Codeset
	// Path to the code that should be registered as Codeset
	Location string
}

// Codeset is the result type of the codeset service register method.
type Codeset struct {
	// The name of the Codeset
	Name string
	// The project this Codeset belongs to
	Project string
	// Codeset description
	Description *string
	// Additional Codeset labels that helps with identifying the type
	Labels []string
	// Full URL to the Codeset
	URL *string
}

// GetPayload is the payload type of the codeset service get method.
type GetPayload struct {
	// Project name
	Project string
	// Codeset name
	Name string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
