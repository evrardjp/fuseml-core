// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package codesetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CodesetClient is the client API for Codeset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodesetClient interface {
	// Retrieve information about Codesets registered in FuseML.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Register a Codeset with the FuseML codeset store.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Retrieve an Codeset from FuseML.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type codesetClient struct {
	cc grpc.ClientConnInterface
}

func NewCodesetClient(cc grpc.ClientConnInterface) CodesetClient {
	return &codesetClient{cc}
}

func (c *codesetClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/codeset.Codeset/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codesetClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/codeset.Codeset/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codesetClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/codeset.Codeset/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodesetServer is the server API for Codeset service.
// All implementations must embed UnimplementedCodesetServer
// for forward compatibility
type CodesetServer interface {
	// Retrieve information about Codesets registered in FuseML.
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Register a Codeset with the FuseML codeset store.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Retrieve an Codeset from FuseML.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedCodesetServer()
}

// UnimplementedCodesetServer must be embedded to have forward compatible implementations.
type UnimplementedCodesetServer struct {
}

func (UnimplementedCodesetServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCodesetServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCodesetServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCodesetServer) mustEmbedUnimplementedCodesetServer() {}

// UnsafeCodesetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodesetServer will
// result in compilation errors.
type UnsafeCodesetServer interface {
	mustEmbedUnimplementedCodesetServer()
}

func RegisterCodesetServer(s grpc.ServiceRegistrar, srv CodesetServer) {
	s.RegisterService(&Codeset_ServiceDesc, srv)
}

func _Codeset_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodesetServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codeset.Codeset/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodesetServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Codeset_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodesetServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codeset.Codeset/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodesetServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Codeset_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodesetServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/codeset.Codeset/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodesetServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Codeset_ServiceDesc is the grpc.ServiceDesc for Codeset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Codeset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codeset.Codeset",
	HandlerType: (*CodesetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Codeset_List_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Codeset_Register_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Codeset_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codeset.proto",
}
