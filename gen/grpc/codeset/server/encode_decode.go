// Code generated by goa v3.3.1, DO NOT EDIT.
//
// codeset gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package server

import (
	"context"

	codeset "github.com/fuseml/fuseml-core/gen/codeset"
	codesetpb "github.com/fuseml/fuseml-core/gen/grpc/codeset/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeListResponse encodes responses from the "codeset" service "list"
// endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]*codeset.Codeset)
	if !ok {
		return nil, goagrpc.ErrInvalidType("codeset", "list", "[]*codeset.Codeset", v)
	}
	resp := NewListResponse(result)
	return resp, nil
}

// DecodeListRequest decodes requests sent to "codeset" service "list" endpoint.
func DecodeListRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *codesetpb.ListRequest
		ok      bool
	)
	{
		if message, ok = v.(*codesetpb.ListRequest); !ok {
			return nil, goagrpc.ErrInvalidType("codeset", "list", "*codesetpb.ListRequest", v)
		}
	}
	var payload *codeset.ListPayload
	{
		payload = NewListPayload(message)
	}
	return payload, nil
}

// EncodeRegisterResponse encodes responses from the "codeset" service
// "register" endpoint.
func EncodeRegisterResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*codeset.Codeset)
	if !ok {
		return nil, goagrpc.ErrInvalidType("codeset", "register", "*codeset.Codeset", v)
	}
	resp := NewRegisterResponse(result)
	return resp, nil
}

// DecodeRegisterRequest decodes requests sent to "codeset" service "register"
// endpoint.
func DecodeRegisterRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *codesetpb.RegisterRequest
		ok      bool
	)
	{
		if message, ok = v.(*codesetpb.RegisterRequest); !ok {
			return nil, goagrpc.ErrInvalidType("codeset", "register", "*codesetpb.RegisterRequest", v)
		}
	}
	var payload *codeset.Codeset
	{
		payload = NewRegisterPayload(message)
	}
	return payload, nil
}

// EncodeGetResponse encodes responses from the "codeset" service "get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*codeset.Codeset)
	if !ok {
		return nil, goagrpc.ErrInvalidType("codeset", "get", "*codeset.Codeset", v)
	}
	resp := NewGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "codeset" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *codesetpb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*codesetpb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("codeset", "get", "*codesetpb.GetRequest", v)
		}
	}
	var payload *codeset.GetPayload
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}
