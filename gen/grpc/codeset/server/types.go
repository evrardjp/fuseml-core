// Code generated by goa v3.3.1, DO NOT EDIT.
//
// codeset gRPC server types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package server

import (
	codeset "github.com/fuseml/fuseml-core/gen/codeset"
	codesetpb "github.com/fuseml/fuseml-core/gen/grpc/codeset/pb"
)

// NewListPayload builds the payload of the "list" endpoint of the "codeset"
// service from the gRPC request type.
func NewListPayload(message *codesetpb.ListRequest) *codeset.ListPayload {
	v := &codeset.ListPayload{}
	if message.Project != "" {
		v.Project = &message.Project
	}
	if message.Label != "" {
		v.Label = &message.Label
	}
	return v
}

// NewListResponse builds the gRPC response type from the result of the "list"
// endpoint of the "codeset" service.
func NewListResponse(result []*codeset.Codeset) *codesetpb.ListResponse {
	message := &codesetpb.ListResponse{}
	message.Field = make([]*codesetpb.Codeset2, len(result))
	for i, val := range result {
		message.Field[i] = &codesetpb.Codeset2{
			Name:     val.Name,
			Project:  val.Project,
			Location: val.Location,
		}
		if val.Description != nil {
			message.Field[i].Description = *val.Description
		}
		if val.Label != nil {
			message.Field[i].Label = *val.Label
		}
	}
	return message
}

// NewRegisterPayload builds the payload of the "register" endpoint of the
// "codeset" service from the gRPC request type.
func NewRegisterPayload(message *codesetpb.RegisterRequest) *codeset.Codeset {
	v := &codeset.Codeset{
		Name:     message.Name,
		Project:  message.Project,
		Location: message.Location,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	if message.Label != "" {
		v.Label = &message.Label
	}
	return v
}

// NewRegisterResponse builds the gRPC response type from the result of the
// "register" endpoint of the "codeset" service.
func NewRegisterResponse(result *codeset.Codeset) *codesetpb.RegisterResponse {
	message := &codesetpb.RegisterResponse{
		Name:     result.Name,
		Project:  result.Project,
		Location: result.Location,
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Label != nil {
		message.Label = *result.Label
	}
	return message
}

// NewGetPayload builds the payload of the "get" endpoint of the "codeset"
// service from the gRPC request type.
func NewGetPayload(message *codesetpb.GetRequest) *codeset.GetPayload {
	v := &codeset.GetPayload{
		Project: message.Project,
		Name:    message.Name,
	}
	return v
}

// NewGetResponse builds the gRPC response type from the result of the "get"
// endpoint of the "codeset" service.
func NewGetResponse(result *codeset.Codeset) *codesetpb.GetResponse {
	message := &codesetpb.GetResponse{
		Name:     result.Name,
		Project:  result.Project,
		Location: result.Location,
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Label != nil {
		message.Label = *result.Label
	}
	return message
}
