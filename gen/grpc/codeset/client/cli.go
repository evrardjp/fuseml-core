// Code generated by goa v3.3.1, DO NOT EDIT.
//
// codeset gRPC client CLI support package
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	"encoding/json"
	"fmt"

	codeset "github.com/fuseml/fuseml-core/gen/codeset"
	codesetpb "github.com/fuseml/fuseml-core/gen/grpc/codeset/pb"
)

// BuildListPayload builds the payload for the codeset list endpoint from CLI
// flags.
func BuildListPayload(codesetListMessage string) (*codeset.ListPayload, error) {
	var err error
	var message codesetpb.ListRequest
	{
		if codesetListMessage != "" {
			err = json.Unmarshal([]byte(codesetListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"label\": \"mlflow\",\n      \"project\": \"mlflow-project-01\"\n   }'")
			}
		}
	}
	v := &codeset.ListPayload{}
	if message.Project != "" {
		v.Project = &message.Project
	}
	if message.Label != "" {
		v.Label = &message.Label
	}

	return v, nil
}

// BuildRegisterPayload builds the payload for the codeset register endpoint
// from CLI flags.
func BuildRegisterPayload(codesetRegisterMessage string) (*codeset.RegisterPayload, error) {
	var err error
	var message codesetpb.RegisterRequest
	{
		if codesetRegisterMessage != "" {
			err = json.Unmarshal([]byte(codesetRegisterMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"codeset\": {\n         \"description\": \"My first MLFlow application with FuseML\",\n         \"labels\": [\n            \"mlflow\",\n            \"playground\"\n         ],\n         \"name\": \"mlflow-app-01\",\n         \"project\": \"mlflow-project-01\",\n         \"url\": \"http://my-gitea.server/project/repository.git\"\n      },\n      \"location\": \"mlflow-project-01\"\n   }'")
			}
		}
	}
	v := &codeset.RegisterPayload{
		Location: message.Location,
	}
	if message.Codeset != nil {
		v.Codeset = protobufCodesetpbCodeset2ToCodesetCodeset(message.Codeset)
	}

	return v, nil
}

// BuildGetPayload builds the payload for the codeset get endpoint from CLI
// flags.
func BuildGetPayload(codesetGetMessage string) (*codeset.GetPayload, error) {
	var err error
	var message codesetpb.GetRequest
	{
		if codesetGetMessage != "" {
			err = json.Unmarshal([]byte(codesetGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"mlflow-app-01\",\n      \"project\": \"mlflow-project-01\"\n   }'")
			}
		}
	}
	v := &codeset.GetPayload{
		Project: message.Project,
		Name:    message.Name,
	}

	return v, nil
}
