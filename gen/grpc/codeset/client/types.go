// Code generated by goa v3.3.1, DO NOT EDIT.
//
// codeset gRPC client types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	codeset "github.com/fuseml/fuseml-core/gen/codeset"
	codesetpb "github.com/fuseml/fuseml-core/gen/grpc/codeset/pb"
)

// NewListRequest builds the gRPC request type from the payload of the "list"
// endpoint of the "codeset" service.
func NewListRequest(payload *codeset.ListPayload) *codesetpb.ListRequest {
	message := &codesetpb.ListRequest{}
	if payload.Project != nil {
		message.Project = *payload.Project
	}
	if payload.Label != nil {
		message.Label = *payload.Label
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "codeset"
// service from the gRPC response type.
func NewListResult(message *codesetpb.ListResponse) []*codeset.Codeset {
	result := make([]*codeset.Codeset, len(message.Field))
	for i, val := range message.Field {
		result[i] = &codeset.Codeset{
			Name:    val.Name,
			Project: val.Project,
		}
		if val.Description != "" {
			result[i].Description = &val.Description
		}
		if val.Label != "" {
			result[i].Label = &val.Label
		}
	}
	return result
}

// NewRegisterRequest builds the gRPC request type from the payload of the
// "register" endpoint of the "codeset" service.
func NewRegisterRequest(payload *codeset.RegisterPayload) *codesetpb.RegisterRequest {
	message := &codesetpb.RegisterRequest{
		Location: payload.Location,
	}
	if payload.Codeset != nil {
		message.Codeset = svcCodesetCodesetToCodesetpbCodeset2(payload.Codeset)
	}
	return message
}

// NewRegisterResult builds the result type of the "register" endpoint of the
// "codeset" service from the gRPC response type.
func NewRegisterResult(message *codesetpb.RegisterResponse) *codeset.Codeset {
	result := &codeset.Codeset{
		Name:    message.Name,
		Project: message.Project,
	}
	if message.Description != "" {
		result.Description = &message.Description
	}
	if message.Label != "" {
		result.Label = &message.Label
	}
	return result
}

// NewGetRequest builds the gRPC request type from the payload of the "get"
// endpoint of the "codeset" service.
func NewGetRequest(payload *codeset.GetPayload) *codesetpb.GetRequest {
	message := &codesetpb.GetRequest{
		Project: payload.Project,
		Name:    payload.Name,
	}
	return message
}

// NewGetResult builds the result type of the "get" endpoint of the "codeset"
// service from the gRPC response type.
func NewGetResult(message *codesetpb.GetResponse) *codeset.Codeset {
	result := &codeset.Codeset{
		Name:    message.Name,
		Project: message.Project,
	}
	if message.Description != "" {
		result.Description = &message.Description
	}
	if message.Label != "" {
		result.Label = &message.Label
	}
	return result
}

// protobufCodesetpbCodeset2ToCodesetCodeset builds a value of type
// *codeset.Codeset from a value of type *codesetpb.Codeset2.
func protobufCodesetpbCodeset2ToCodesetCodeset(v *codesetpb.Codeset2) *codeset.Codeset {
	res := &codeset.Codeset{
		Name:    v.Name,
		Project: v.Project,
	}
	if v.Description != "" {
		res.Description = &v.Description
	}
	if v.Label != "" {
		res.Label = &v.Label
	}

	return res
}

// svcCodesetCodesetToCodesetpbCodeset2 builds a value of type
// *codesetpb.Codeset2 from a value of type *codeset.Codeset.
func svcCodesetCodesetToCodesetpbCodeset2(v *codeset.Codeset) *codesetpb.Codeset2 {
	res := &codesetpb.Codeset2{
		Name:    v.Name,
		Project: v.Project,
	}
	if v.Description != nil {
		res.Description = *v.Description
	}
	if v.Label != nil {
		res.Label = *v.Label
	}

	return res
}
