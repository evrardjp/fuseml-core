// Code generated by goa v3.3.1, DO NOT EDIT.
//
// runnable gRPC client CLI support package
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	"encoding/json"
	"fmt"

	runnablepb "github.com/fuseml/fuseml-core/gen/grpc/runnable/pb"
	runnable "github.com/fuseml/fuseml-core/gen/runnable"
)

// BuildListPayload builds the payload for the runnable list endpoint from CLI
// flags.
func BuildListPayload(runnableListMessage string) (*runnable.ListPayload, error) {
	var err error
	var message runnablepb.ListRequest
	{
		if runnableListMessage != "" {
			err = json.Unmarshal([]byte(runnableListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Id reprehenderit aut.\"\n   }'")
			}
		}
	}
	v := &runnable.ListPayload{}
	if message.Id != "" {
		v.ID = &message.Id
	}

	return v, nil
}

// BuildRegisterPayload builds the payload for the runnable register endpoint
// from CLI flags.
func BuildRegisterPayload(runnableRegisterMessage string) (*runnable.Runnable, error) {
	var err error
	var message runnablepb.RegisterRequest
	{
		if runnableRegisterMessage != "" {
			err = json.Unmarshal([]byte(runnableRegisterMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"created\": \"1971-11-06T07:17:04Z\",\n      \"id\": \"5E3B665E-1239-9C12-9643-FFC1E6C04697\",\n      \"image\": {\n         \"registryUrl\": \"Autem voluptatem qui molestiae debitis aliquam et.\",\n         \"repository\": \"Nihil ab similique.\",\n         \"tag\": \"Adipisci temporibus assumenda necessitatibus quos.\"\n      },\n      \"inputs\": [\n         {\n            \"kind\": \"Earum corrupti.\",\n            \"name\": \"Odit possimus consequatur minus consequuntur exercitationem.\",\n            \"parameter\": {\n               \"datatype\": \"Sint dolor.\",\n               \"default\": \"Dolor pariatur et a ratione unde.\",\n               \"optional\": true\n            },\n            \"runnable\": {\n               \"kind\": \"Enim et error labore.\",\n               \"labels\": [\n                  \"Officiis ut.\",\n                  \"Dicta saepe officiis qui labore temporibus illo.\"\n               ],\n               \"name\": \"Nihil beatae cum consectetur corporis.\"\n            }\n         },\n         {\n            \"kind\": \"Earum corrupti.\",\n            \"name\": \"Odit possimus consequatur minus consequuntur exercitationem.\",\n            \"parameter\": {\n               \"datatype\": \"Sint dolor.\",\n               \"default\": \"Dolor pariatur et a ratione unde.\",\n               \"optional\": true\n            },\n            \"runnable\": {\n               \"kind\": \"Enim et error labore.\",\n               \"labels\": [\n                  \"Officiis ut.\",\n                  \"Dicta saepe officiis qui labore temporibus illo.\"\n               ],\n               \"name\": \"Nihil beatae cum consectetur corporis.\"\n            }\n         },\n         {\n            \"kind\": \"Earum corrupti.\",\n            \"name\": \"Odit possimus consequatur minus consequuntur exercitationem.\",\n            \"parameter\": {\n               \"datatype\": \"Sint dolor.\",\n               \"default\": \"Dolor pariatur et a ratione unde.\",\n               \"optional\": true\n            },\n            \"runnable\": {\n               \"kind\": \"Enim et error labore.\",\n               \"labels\": [\n                  \"Officiis ut.\",\n                  \"Dicta saepe officiis qui labore temporibus illo.\"\n               ],\n               \"name\": \"Nihil beatae cum consectetur corporis.\"\n            }\n         }\n      ],\n      \"kind\": \"Quia corrupti nihil quidem ut.\",\n      \"labels\": [\n         \"Error sint sit velit rerum rerum autem.\",\n         \"Voluptatem ipsum sed odit totam minima in.\",\n         \"Id molestiae possimus nostrum vero distinctio aut.\",\n         \"Accusamus totam ea.\"\n      ],\n      \"name\": \"Ab ex commodi illo exercitationem.\",\n      \"outputs\": [\n         {\n            \"kind\": \"Et ex beatae omnis.\",\n            \"metadata\": {\n               \"datatype\": \"Sint dolor.\",\n               \"default\": \"Dolor pariatur et a ratione unde.\",\n               \"optional\": true\n            },\n            \"name\": \"Omnis deleniti temporibus doloremque illum quia odio.\",\n            \"runnable\": {\n               \"kind\": \"Enim et error labore.\",\n               \"labels\": [\n                  \"Officiis ut.\",\n                  \"Dicta saepe officiis qui labore temporibus illo.\"\n               ],\n               \"name\": \"Nihil beatae cum consectetur corporis.\"\n            }\n         },\n         {\n            \"kind\": \"Et ex beatae omnis.\",\n            \"metadata\": {\n               \"datatype\": \"Sint dolor.\",\n               \"default\": \"Dolor pariatur et a ratione unde.\",\n               \"optional\": true\n            },\n            \"name\": \"Omnis deleniti temporibus doloremque illum quia odio.\",\n            \"runnable\": {\n               \"kind\": \"Enim et error labore.\",\n               \"labels\": [\n                  \"Officiis ut.\",\n                  \"Dicta saepe officiis qui labore temporibus illo.\"\n               ],\n               \"name\": \"Nihil beatae cum consectetur corporis.\"\n            }\n         }\n      ]\n   }'")
			}
		}
	}
	v := &runnable.Runnable{
		Name: message.Name,
		Kind: message.Kind,
	}
	if message.Id != "" {
		v.ID = &message.Id
	}
	if message.Created != "" {
		v.Created = &message.Created
	}
	if message.Image != nil {
		v.Image = protobufRunnablepbRunnableImageToRunnableRunnableImage(message.Image)
	}
	if message.Inputs != nil {
		v.Inputs = make([]*runnable.RunnableInput, len(message.Inputs))
		for i, val := range message.Inputs {
			v.Inputs[i] = &runnable.RunnableInput{}
			if val.Name != "" {
				v.Inputs[i].Name = &val.Name
			}
			if val.Kind != "" {
				v.Inputs[i].Kind = &val.Kind
			}
			if val.Runnable != nil {
				v.Inputs[i].Runnable = protobufRunnablepbRunnableRefToRunnableRunnableRef(val.Runnable)
			}
			if val.Parameter != nil {
				v.Inputs[i].Parameter = protobufRunnablepbInputParameterToRunnableInputParameter(val.Parameter)
			}
		}
	}
	if message.Outputs != nil {
		v.Outputs = make([]*runnable.RunnableOutput, len(message.Outputs))
		for i, val := range message.Outputs {
			v.Outputs[i] = &runnable.RunnableOutput{}
			if val.Name != "" {
				v.Outputs[i].Name = &val.Name
			}
			if val.Kind != "" {
				v.Outputs[i].Kind = &val.Kind
			}
			if val.Runnable != nil {
				v.Outputs[i].Runnable = protobufRunnablepbRunnableRefToRunnableRunnableRef(val.Runnable)
			}
			if val.Metadata != nil {
				v.Outputs[i].Metadata = protobufRunnablepbInputParameterToRunnableInputParameter(val.Metadata)
			}
		}
	}
	if message.Labels != nil {
		v.Labels = make([]string, len(message.Labels))
		for i, val := range message.Labels {
			v.Labels[i] = val
		}
	}

	return v, nil
}

// BuildGetPayload builds the payload for the runnable get endpoint from CLI
// flags.
func BuildGetPayload(runnableGetMessage string) (*runnable.GetPayload, error) {
	var err error
	var message runnablepb.GetRequest
	{
		if runnableGetMessage != "" {
			err = json.Unmarshal([]byte(runnableGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"runnableNameOrId\": \"Quae quaerat autem quia.\"\n   }'")
			}
		}
	}
	v := &runnable.GetPayload{
		RunnableNameOrID: message.RunnableNameOrId,
	}

	return v, nil
}
