// Code generated by goa v3.3.1, DO NOT EDIT.
//
// runnable gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	"context"

	runnablepb "github.com/fuseml/fuseml-core/gen/grpc/runnable/pb"
	runnable "github.com/fuseml/fuseml-core/gen/runnable"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildListFunc builds the remote method to invoke for "runnable" service
// "list" endpoint.
func BuildListFunc(grpccli runnablepb.RunnableClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*runnablepb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &runnablepb.ListRequest{}, opts...)
	}
}

// EncodeListRequest encodes requests sent to runnable list endpoint.
func EncodeListRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*runnable.ListPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("runnable", "list", "*runnable.ListPayload", v)
	}
	return NewListRequest(payload), nil
}

// DecodeListResponse decodes responses from the runnable list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*runnablepb.ListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("runnable", "list", "*runnablepb.ListResponse", v)
	}
	if err := ValidateListResponse(message); err != nil {
		return nil, err
	}
	res := NewListResult(message)
	return res, nil
}

// BuildRegisterFunc builds the remote method to invoke for "runnable" service
// "register" endpoint.
func BuildRegisterFunc(grpccli runnablepb.RunnableClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Register(ctx, reqpb.(*runnablepb.RegisterRequest), opts...)
		}
		return grpccli.Register(ctx, &runnablepb.RegisterRequest{}, opts...)
	}
}

// EncodeRegisterRequest encodes requests sent to runnable register endpoint.
func EncodeRegisterRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*runnable.Runnable)
	if !ok {
		return nil, goagrpc.ErrInvalidType("runnable", "register", "*runnable.Runnable", v)
	}
	return NewRegisterRequest(payload), nil
}

// DecodeRegisterResponse decodes responses from the runnable register endpoint.
func DecodeRegisterResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*runnablepb.RegisterResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("runnable", "register", "*runnablepb.RegisterResponse", v)
	}
	if err := ValidateRegisterResponse(message); err != nil {
		return nil, err
	}
	res := NewRegisterResult(message)
	return res, nil
}

// BuildGetFunc builds the remote method to invoke for "runnable" service "get"
// endpoint.
func BuildGetFunc(grpccli runnablepb.RunnableClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*runnablepb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &runnablepb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to runnable get endpoint.
func EncodeGetRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*runnable.GetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("runnable", "get", "*runnable.GetPayload", v)
	}
	return NewGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the runnable get endpoint.
func DecodeGetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*runnablepb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("runnable", "get", "*runnablepb.GetResponse", v)
	}
	if err := ValidateGetResponse(message); err != nil {
		return nil, err
	}
	res := NewGetResult(message)
	return res, nil
}
