// Code generated by goa v3.3.1, DO NOT EDIT.
//
// runnable gRPC client types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	runnablepb "github.com/fuseml/fuseml-core/gen/grpc/runnable/pb"
	runnable "github.com/fuseml/fuseml-core/gen/runnable"
	goa "goa.design/goa/v3/pkg"
)

// NewListRequest builds the gRPC request type from the payload of the "list"
// endpoint of the "runnable" service.
func NewListRequest(payload *runnable.ListPayload) *runnablepb.ListRequest {
	message := &runnablepb.ListRequest{}
	if payload.Kind != nil {
		message.Kind = *payload.Kind
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the
// "runnable" service from the gRPC response type.
func NewListResult(message *runnablepb.ListResponse) []*runnable.Runnable {
	result := make([]*runnable.Runnable, len(message.Field))
	for i, val := range message.Field {
		result[i] = &runnable.Runnable{
			Name: val.Name,
			Kind: val.Kind,
		}
		if val.Id != "" {
			result[i].ID = &val.Id
		}
		if val.Created != "" {
			result[i].Created = &val.Created
		}
		if val.Image != nil {
			result[i].Image = protobufRunnablepbRunnableImageToRunnableRunnableImage(val.Image)
		}
		if val.Inputs != nil {
			result[i].Inputs = make([]*runnable.RunnableInput, len(val.Inputs))
			for j, val := range val.Inputs {
				result[i].Inputs[j] = &runnable.RunnableInput{}
				if val.Name != "" {
					result[i].Inputs[j].Name = &val.Name
				}
				if val.Kind != "" {
					result[i].Inputs[j].Kind = &val.Kind
				}
				if val.Runnable != nil {
					result[i].Inputs[j].Runnable = protobufRunnablepbRunnableRefToRunnableRunnableRef(val.Runnable)
				}
				if val.Parameter != nil {
					result[i].Inputs[j].Parameter = protobufRunnablepbInputParameterToRunnableInputParameter(val.Parameter)
				}
			}
		}
		if val.Outputs != nil {
			result[i].Outputs = make([]*runnable.RunnableOutput, len(val.Outputs))
			for j, val := range val.Outputs {
				result[i].Outputs[j] = &runnable.RunnableOutput{}
				if val.Name != "" {
					result[i].Outputs[j].Name = &val.Name
				}
				if val.Kind != "" {
					result[i].Outputs[j].Kind = &val.Kind
				}
				if val.Runnable != nil {
					result[i].Outputs[j].Runnable = protobufRunnablepbRunnableRefToRunnableRunnableRef(val.Runnable)
				}
				if val.Metadata != nil {
					result[i].Outputs[j].Metadata = protobufRunnablepbInputParameterToRunnableInputParameter(val.Metadata)
				}
			}
		}
		if val.Labels != nil {
			result[i].Labels = make([]string, len(val.Labels))
			for j, val := range val.Labels {
				result[i].Labels[j] = val
			}
		}
	}
	return result
}

// NewRegisterRequest builds the gRPC request type from the payload of the
// "register" endpoint of the "runnable" service.
func NewRegisterRequest(payload *runnable.Runnable) *runnablepb.RegisterRequest {
	message := &runnablepb.RegisterRequest{
		Name: payload.Name,
		Kind: payload.Kind,
	}
	if payload.ID != nil {
		message.Id = *payload.ID
	}
	if payload.Created != nil {
		message.Created = *payload.Created
	}
	if payload.Image != nil {
		message.Image = svcRunnableRunnableImageToRunnablepbRunnableImage(payload.Image)
	}
	if payload.Inputs != nil {
		message.Inputs = make([]*runnablepb.RunnableInput, len(payload.Inputs))
		for i, val := range payload.Inputs {
			message.Inputs[i] = &runnablepb.RunnableInput{}
			if val.Name != nil {
				message.Inputs[i].Name = *val.Name
			}
			if val.Kind != nil {
				message.Inputs[i].Kind = *val.Kind
			}
			if val.Runnable != nil {
				message.Inputs[i].Runnable = svcRunnableRunnableRefToRunnablepbRunnableRef(val.Runnable)
			}
			if val.Parameter != nil {
				message.Inputs[i].Parameter = svcRunnableInputParameterToRunnablepbInputParameter(val.Parameter)
			}
		}
	}
	if payload.Outputs != nil {
		message.Outputs = make([]*runnablepb.RunnableOutput, len(payload.Outputs))
		for i, val := range payload.Outputs {
			message.Outputs[i] = &runnablepb.RunnableOutput{}
			if val.Name != nil {
				message.Outputs[i].Name = *val.Name
			}
			if val.Kind != nil {
				message.Outputs[i].Kind = *val.Kind
			}
			if val.Runnable != nil {
				message.Outputs[i].Runnable = svcRunnableRunnableRefToRunnablepbRunnableRef(val.Runnable)
			}
			if val.Metadata != nil {
				message.Outputs[i].Metadata = svcRunnableInputParameterToRunnablepbInputParameter(val.Metadata)
			}
		}
	}
	if payload.Labels != nil {
		message.Labels = make([]string, len(payload.Labels))
		for i, val := range payload.Labels {
			message.Labels[i] = val
		}
	}
	return message
}

// NewRegisterResult builds the result type of the "register" endpoint of the
// "runnable" service from the gRPC response type.
func NewRegisterResult(message *runnablepb.RegisterResponse) *runnable.Runnable {
	result := &runnable.Runnable{
		Name: message.Name,
		Kind: message.Kind,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Created != "" {
		result.Created = &message.Created
	}
	if message.Image != nil {
		result.Image = protobufRunnablepbRunnableImageToRunnableRunnableImage(message.Image)
	}
	if message.Inputs != nil {
		result.Inputs = make([]*runnable.RunnableInput, len(message.Inputs))
		for i, val := range message.Inputs {
			result.Inputs[i] = &runnable.RunnableInput{}
			if val.Name != "" {
				result.Inputs[i].Name = &val.Name
			}
			if val.Kind != "" {
				result.Inputs[i].Kind = &val.Kind
			}
			if val.Runnable != nil {
				result.Inputs[i].Runnable = protobufRunnablepbRunnableRefToRunnableRunnableRef(val.Runnable)
			}
			if val.Parameter != nil {
				result.Inputs[i].Parameter = protobufRunnablepbInputParameterToRunnableInputParameter(val.Parameter)
			}
		}
	}
	if message.Outputs != nil {
		result.Outputs = make([]*runnable.RunnableOutput, len(message.Outputs))
		for i, val := range message.Outputs {
			result.Outputs[i] = &runnable.RunnableOutput{}
			if val.Name != "" {
				result.Outputs[i].Name = &val.Name
			}
			if val.Kind != "" {
				result.Outputs[i].Kind = &val.Kind
			}
			if val.Runnable != nil {
				result.Outputs[i].Runnable = protobufRunnablepbRunnableRefToRunnableRunnableRef(val.Runnable)
			}
			if val.Metadata != nil {
				result.Outputs[i].Metadata = protobufRunnablepbInputParameterToRunnableInputParameter(val.Metadata)
			}
		}
	}
	if message.Labels != nil {
		result.Labels = make([]string, len(message.Labels))
		for i, val := range message.Labels {
			result.Labels[i] = val
		}
	}
	return result
}

// NewGetRequest builds the gRPC request type from the payload of the "get"
// endpoint of the "runnable" service.
func NewGetRequest(payload *runnable.GetPayload) *runnablepb.GetRequest {
	message := &runnablepb.GetRequest{
		RunnableNameOrId: payload.RunnableNameOrID,
	}
	return message
}

// NewGetResult builds the result type of the "get" endpoint of the "runnable"
// service from the gRPC response type.
func NewGetResult(message *runnablepb.GetResponse) *runnable.Runnable {
	result := &runnable.Runnable{
		Name: message.Name,
		Kind: message.Kind,
	}
	if message.Id != "" {
		result.ID = &message.Id
	}
	if message.Created != "" {
		result.Created = &message.Created
	}
	if message.Image != nil {
		result.Image = protobufRunnablepbRunnableImageToRunnableRunnableImage(message.Image)
	}
	if message.Inputs != nil {
		result.Inputs = make([]*runnable.RunnableInput, len(message.Inputs))
		for i, val := range message.Inputs {
			result.Inputs[i] = &runnable.RunnableInput{}
			if val.Name != "" {
				result.Inputs[i].Name = &val.Name
			}
			if val.Kind != "" {
				result.Inputs[i].Kind = &val.Kind
			}
			if val.Runnable != nil {
				result.Inputs[i].Runnable = protobufRunnablepbRunnableRefToRunnableRunnableRef(val.Runnable)
			}
			if val.Parameter != nil {
				result.Inputs[i].Parameter = protobufRunnablepbInputParameterToRunnableInputParameter(val.Parameter)
			}
		}
	}
	if message.Outputs != nil {
		result.Outputs = make([]*runnable.RunnableOutput, len(message.Outputs))
		for i, val := range message.Outputs {
			result.Outputs[i] = &runnable.RunnableOutput{}
			if val.Name != "" {
				result.Outputs[i].Name = &val.Name
			}
			if val.Kind != "" {
				result.Outputs[i].Kind = &val.Kind
			}
			if val.Runnable != nil {
				result.Outputs[i].Runnable = protobufRunnablepbRunnableRefToRunnableRunnableRef(val.Runnable)
			}
			if val.Metadata != nil {
				result.Outputs[i].Metadata = protobufRunnablepbInputParameterToRunnableInputParameter(val.Metadata)
			}
		}
	}
	if message.Labels != nil {
		result.Labels = make([]string, len(message.Labels))
		for i, val := range message.Labels {
			result.Labels[i] = val
		}
	}
	return result
}

// ValidateListResponse runs the validations defined on ListResponse.
func ValidateListResponse(message *runnablepb.ListResponse) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateRunnable2(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRunnable2 runs the validations defined on Runnable2.
func ValidateRunnable2(message *runnablepb.Runnable2) (err error) {
	if message.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "message"))
	}
	if message.Inputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inputs", "message"))
	}
	if message.Outputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("outputs", "message"))
	}
	if message.Labels == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("labels", "message"))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message.id", message.Id, goa.FormatUUID))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.created", message.Created, goa.FormatDateTime))

	return
}

// ValidateRunnableImage runs the validations defined on RunnableImage.
func ValidateRunnableImage(message *runnablepb.RunnableImage) (err error) {

	return
}

// ValidateRunnableInput runs the validations defined on RunnableInput.
func ValidateRunnableInput(message *runnablepb.RunnableInput) (err error) {

	return
}

// ValidateRunnableRef runs the validations defined on RunnableRef.
func ValidateRunnableRef(message *runnablepb.RunnableRef) (err error) {

	return
}

// ValidateInputParameter runs the validations defined on InputParameter.
func ValidateInputParameter(message *runnablepb.InputParameter) (err error) {

	return
}

// ValidateRunnableOutput runs the validations defined on RunnableOutput.
func ValidateRunnableOutput(message *runnablepb.RunnableOutput) (err error) {

	return
}

// ValidateRegisterResponse runs the validations defined on RegisterResponse.
func ValidateRegisterResponse(message *runnablepb.RegisterResponse) (err error) {
	if message.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "message"))
	}
	if message.Inputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inputs", "message"))
	}
	if message.Outputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("outputs", "message"))
	}
	if message.Labels == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("labels", "message"))
	}
	if message.Id != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.id", message.Id, goa.FormatUUID))
	}
	if message.Created != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.created", message.Created, goa.FormatDateTime))
	}
	return
}

// ValidateGetResponse runs the validations defined on GetResponse.
func ValidateGetResponse(message *runnablepb.GetResponse) (err error) {
	if message.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "message"))
	}
	if message.Inputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inputs", "message"))
	}
	if message.Outputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("outputs", "message"))
	}
	if message.Labels == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("labels", "message"))
	}
	if message.Id != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.id", message.Id, goa.FormatUUID))
	}
	if message.Created != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.created", message.Created, goa.FormatDateTime))
	}
	return
}

// svcRunnableRunnableImageToRunnablepbRunnableImage builds a value of type
// *runnablepb.RunnableImage from a value of type *runnable.RunnableImage.
func svcRunnableRunnableImageToRunnablepbRunnableImage(v *runnable.RunnableImage) *runnablepb.RunnableImage {
	res := &runnablepb.RunnableImage{}
	if v.RegistryURL != nil {
		res.RegistryUrl = *v.RegistryURL
	}
	if v.Repository != nil {
		res.Repository = *v.Repository
	}
	if v.Tag != nil {
		res.Tag = *v.Tag
	}

	return res
}

// svcRunnableRunnableRefToRunnablepbRunnableRef builds a value of type
// *runnablepb.RunnableRef from a value of type *runnable.RunnableRef.
func svcRunnableRunnableRefToRunnablepbRunnableRef(v *runnable.RunnableRef) *runnablepb.RunnableRef {
	if v == nil {
		return nil
	}
	res := &runnablepb.RunnableRef{}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.Kind != nil {
		res.Kind = *v.Kind
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}

// svcRunnableInputParameterToRunnablepbInputParameter builds a value of type
// *runnablepb.InputParameter from a value of type *runnable.InputParameter.
func svcRunnableInputParameterToRunnablepbInputParameter(v *runnable.InputParameter) *runnablepb.InputParameter {
	if v == nil {
		return nil
	}
	res := &runnablepb.InputParameter{}
	if v.Datatype != nil {
		res.Datatype = *v.Datatype
	}
	if v.Optional != nil {
		res.Optional = *v.Optional
	}
	if v.Default != nil {
		res.Default = *v.Default
	}

	return res
}

// protobufRunnablepbRunnableImageToRunnableRunnableImage builds a value of
// type *runnable.RunnableImage from a value of type *runnablepb.RunnableImage.
func protobufRunnablepbRunnableImageToRunnableRunnableImage(v *runnablepb.RunnableImage) *runnable.RunnableImage {
	res := &runnable.RunnableImage{}
	if v.RegistryUrl != "" {
		res.RegistryURL = &v.RegistryUrl
	}
	if v.Repository != "" {
		res.Repository = &v.Repository
	}
	if v.Tag != "" {
		res.Tag = &v.Tag
	}

	return res
}

// protobufRunnablepbRunnableRefToRunnableRunnableRef builds a value of type
// *runnable.RunnableRef from a value of type *runnablepb.RunnableRef.
func protobufRunnablepbRunnableRefToRunnableRunnableRef(v *runnablepb.RunnableRef) *runnable.RunnableRef {
	if v == nil {
		return nil
	}
	res := &runnable.RunnableRef{}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.Kind != "" {
		res.Kind = &v.Kind
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}

// protobufRunnablepbInputParameterToRunnableInputParameter builds a value of
// type *runnable.InputParameter from a value of type
// *runnablepb.InputParameter.
func protobufRunnablepbInputParameterToRunnableInputParameter(v *runnablepb.InputParameter) *runnable.InputParameter {
	if v == nil {
		return nil
	}
	res := &runnable.InputParameter{
		Optional: &v.Optional,
	}
	if v.Datatype != "" {
		res.Datatype = &v.Datatype
	}
	if v.Default != "" {
		res.Default = &v.Default
	}

	return res
}
