// Code generated by goa v3.3.1, DO NOT EDIT.
//
// codeset HTTP server types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package server

import (
	codeset "github.com/fuseml/fuseml-core/gen/codeset"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "codeset" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// The name of the Codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The project this Codeset belongs to
	Project *string `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// Path to the code that should be registered as Codeset
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Codeset description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Additional Codeset label that helps with identifying the type
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
}

// ListResponseBody is the type of the "codeset" service "list" endpoint HTTP
// response body.
type ListResponseBody []*CodesetResponse

// RegisterResponseBody is the type of the "codeset" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// The name of the Codeset
	Name string `form:"name" json:"name" xml:"name"`
	// The project this Codeset belongs to
	Project string `form:"project" json:"project" xml:"project"`
	// Path to the code that should be registered as Codeset
	Location string `form:"location" json:"location" xml:"location"`
	// Codeset description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Additional Codeset label that helps with identifying the type
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
}

// GetResponseBody is the type of the "codeset" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// The name of the Codeset
	Name string `form:"name" json:"name" xml:"name"`
	// The project this Codeset belongs to
	Project string `form:"project" json:"project" xml:"project"`
	// Path to the code that should be registered as Codeset
	Location string `form:"location" json:"location" xml:"location"`
	// Codeset description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Additional Codeset label that helps with identifying the type
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
}

// ListNotFoundResponseBody is the type of the "codeset" service "list"
// endpoint HTTP response body for the "NotFound" error.
type ListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterBadRequestResponseBody is the type of the "codeset" service
// "register" endpoint HTTP response body for the "BadRequest" error.
type RegisterBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBadRequestResponseBody is the type of the "codeset" service "get"
// endpoint HTTP response body for the "BadRequest" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetNotFoundResponseBody is the type of the "codeset" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CodesetResponse is used to define fields on response body types.
type CodesetResponse struct {
	// The name of the Codeset
	Name string `form:"name" json:"name" xml:"name"`
	// The project this Codeset belongs to
	Project string `form:"project" json:"project" xml:"project"`
	// Path to the code that should be registered as Codeset
	Location string `form:"location" json:"location" xml:"location"`
	// Codeset description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Additional Codeset label that helps with identifying the type
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "codeset" service.
func NewListResponseBody(res []*codeset.Codeset) ListResponseBody {
	body := make([]*CodesetResponse, len(res))
	for i, val := range res {
		body[i] = marshalCodesetCodesetToCodesetResponse(val)
	}
	return body
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "codeset" service.
func NewRegisterResponseBody(res *codeset.Codeset) *RegisterResponseBody {
	body := &RegisterResponseBody{
		Name:        res.Name,
		Project:     res.Project,
		Location:    res.Location,
		Description: res.Description,
		Label:       res.Label,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "codeset" service.
func NewGetResponseBody(res *codeset.Codeset) *GetResponseBody {
	body := &GetResponseBody{
		Name:        res.Name,
		Project:     res.Project,
		Location:    res.Location,
		Description: res.Description,
		Label:       res.Label,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "codeset" service.
func NewListNotFoundResponseBody(res *goa.ServiceError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterBadRequestResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "codeset" service.
func NewRegisterBadRequestResponseBody(res *goa.ServiceError) *RegisterBadRequestResponseBody {
	body := &RegisterBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "codeset" service.
func NewGetBadRequestResponseBody(res *goa.ServiceError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "codeset" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a codeset service list endpoint payload.
func NewListPayload(project *string, label *string) *codeset.ListPayload {
	v := &codeset.ListPayload{}
	v.Project = project
	v.Label = label

	return v
}

// NewRegisterCodeset builds a codeset service register endpoint payload.
func NewRegisterCodeset(body *RegisterRequestBody) *codeset.Codeset {
	v := &codeset.Codeset{
		Name:        *body.Name,
		Project:     *body.Project,
		Location:    *body.Location,
		Description: body.Description,
		Label:       body.Label,
	}

	return v
}

// NewGetPayload builds a codeset service get endpoint payload.
func NewGetPayload(project string, name string) *codeset.GetPayload {
	v := &codeset.GetPayload{}
	v.Project = project
	v.Name = name

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Project == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project", "body"))
	}
	if body.Location == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("location", "body"))
	}
	return
}
