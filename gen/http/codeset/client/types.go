// Code generated by goa v3.3.1, DO NOT EDIT.
//
// codeset HTTP client types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	codeset "github.com/fuseml/fuseml-core/gen/codeset"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "codeset" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Codeset descriptor
	Codeset *CodesetRequestBody `form:"codeset" json:"codeset" xml:"codeset"`
}

// ListResponseBody is the type of the "codeset" service "list" endpoint HTTP
// response body.
type ListResponseBody []*CodesetResponse

// RegisterResponseBody is the type of the "codeset" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// The name of the Codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The project this Codeset belongs to
	Project *string `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// Codeset description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Additional Codeset labels that helps with identifying the type
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// GetResponseBody is the type of the "codeset" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// The name of the Codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The project this Codeset belongs to
	Project *string `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// Codeset description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Additional Codeset labels that helps with identifying the type
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// ListNotFoundResponseBody is the type of the "codeset" service "list"
// endpoint HTTP response body for the "NotFound" error.
type ListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RegisterBadRequestResponseBody is the type of the "codeset" service
// "register" endpoint HTTP response body for the "BadRequest" error.
type RegisterBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBadRequestResponseBody is the type of the "codeset" service "get"
// endpoint HTTP response body for the "BadRequest" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetNotFoundResponseBody is the type of the "codeset" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CodesetResponse is used to define fields on response body types.
type CodesetResponse struct {
	// The name of the Codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The project this Codeset belongs to
	Project *string `form:"project,omitempty" json:"project,omitempty" xml:"project,omitempty"`
	// Codeset description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Additional Codeset labels that helps with identifying the type
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// CodesetRequestBody is used to define fields on request body types.
type CodesetRequestBody struct {
	// The name of the Codeset
	Name string `form:"name" json:"name" xml:"name"`
	// The project this Codeset belongs to
	Project string `form:"project" json:"project" xml:"project"`
	// Codeset description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Additional Codeset labels that helps with identifying the type
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "codeset" service.
func NewRegisterRequestBody(p *codeset.RegisterPayload) *RegisterRequestBody {
	body := &RegisterRequestBody{}
	if p.Codeset != nil {
		body.Codeset = marshalCodesetCodesetToCodesetRequestBody(p.Codeset)
	}
	return body
}

// NewListCodesetOK builds a "codeset" service "list" endpoint result from a
// HTTP "OK" response.
func NewListCodesetOK(body []*CodesetResponse) []*codeset.Codeset {
	v := make([]*codeset.Codeset, len(body))
	for i, val := range body {
		v[i] = unmarshalCodesetResponseToCodesetCodeset(val)
	}
	return v
}

// NewListNotFound builds a codeset service list endpoint NotFound error.
func NewListNotFound(body *ListNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRegisterCodesetCreated builds a "codeset" service "register" endpoint
// result from a HTTP "Created" response.
func NewRegisterCodesetCreated(body *RegisterResponseBody) *codeset.Codeset {
	v := &codeset.Codeset{
		Name:        *body.Name,
		Project:     *body.Project,
		Description: body.Description,
	}
	if body.Labels != nil {
		v.Labels = make([]string, len(body.Labels))
		for i, val := range body.Labels {
			v.Labels[i] = val
		}
	}

	return v
}

// NewRegisterBadRequest builds a codeset service register endpoint BadRequest
// error.
func NewRegisterBadRequest(body *RegisterBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetCodesetOK builds a "codeset" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetCodesetOK(body *GetResponseBody) *codeset.Codeset {
	v := &codeset.Codeset{
		Name:        *body.Name,
		Project:     *body.Project,
		Description: body.Description,
	}
	if body.Labels != nil {
		v.Labels = make([]string, len(body.Labels))
		for i, val := range body.Labels {
			v.Labels[i] = val
		}
	}

	return v
}

// NewGetBadRequest builds a codeset service get endpoint BadRequest error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetNotFound builds a codeset service get endpoint NotFound error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateRegisterResponseBody runs the validations defined on
// RegisterResponseBody
func ValidateRegisterResponseBody(body *RegisterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Project == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project", "body"))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Project == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project", "body"))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_NotFound_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRegisterBadRequestResponseBody runs the validations defined on
// register_BadRequest_response_body
func ValidateRegisterBadRequestResponseBody(body *RegisterBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_BadRequest_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_NotFound_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCodesetResponse runs the validations defined on CodesetResponse
func ValidateCodesetResponse(body *CodesetResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Project == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project", "body"))
	}
	return
}
