// Code generated by goa v3.3.1, DO NOT EDIT.
//
// fuseml-core HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	codesetc "github.com/fuseml/fuseml-core/gen/http/codeset/client"
	runnablec "github.com/fuseml/fuseml-core/gen/http/runnable/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `codeset (list|register|get)
runnable (list|register|get)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` codeset list --project "mlflow-project-01" --label "mlflow"` + "\n" +
		os.Args[0] + ` runnable list --kind "builder"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		codesetFlags = flag.NewFlagSet("codeset", flag.ContinueOnError)

		codesetListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		codesetListProjectFlag = codesetListFlags.String("project", "", "")
		codesetListLabelFlag   = codesetListFlags.String("label", "", "")

		codesetRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		codesetRegisterBodyFlag = codesetRegisterFlags.String("body", "REQUIRED", "")

		codesetGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		codesetGetProjectFlag = codesetGetFlags.String("project", "REQUIRED", "Project name")
		codesetGetNameFlag    = codesetGetFlags.String("name", "REQUIRED", "Codeset name")

		runnableFlags = flag.NewFlagSet("runnable", flag.ContinueOnError)

		runnableListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		runnableListKindFlag = runnableListFlags.String("kind", "", "")

		runnableRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		runnableRegisterBodyFlag = runnableRegisterFlags.String("body", "REQUIRED", "")

		runnableGetFlags                = flag.NewFlagSet("get", flag.ExitOnError)
		runnableGetRunnableNameOrIDFlag = runnableGetFlags.String("runnable-name-or-id", "REQUIRED", "Runnable name or id")
	)
	codesetFlags.Usage = codesetUsage
	codesetListFlags.Usage = codesetListUsage
	codesetRegisterFlags.Usage = codesetRegisterUsage
	codesetGetFlags.Usage = codesetGetUsage

	runnableFlags.Usage = runnableUsage
	runnableListFlags.Usage = runnableListUsage
	runnableRegisterFlags.Usage = runnableRegisterUsage
	runnableGetFlags.Usage = runnableGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "codeset":
			svcf = codesetFlags
		case "runnable":
			svcf = runnableFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "codeset":
			switch epn {
			case "list":
				epf = codesetListFlags

			case "register":
				epf = codesetRegisterFlags

			case "get":
				epf = codesetGetFlags

			}

		case "runnable":
			switch epn {
			case "list":
				epf = runnableListFlags

			case "register":
				epf = runnableRegisterFlags

			case "get":
				epf = runnableGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "codeset":
			c := codesetc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = codesetc.BuildListPayload(*codesetListProjectFlag, *codesetListLabelFlag)
			case "register":
				endpoint = c.Register()
				data, err = codesetc.BuildRegisterPayload(*codesetRegisterBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = codesetc.BuildGetPayload(*codesetGetProjectFlag, *codesetGetNameFlag)
			}
		case "runnable":
			c := runnablec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = runnablec.BuildListPayload(*runnableListKindFlag)
			case "register":
				endpoint = c.Register()
				data, err = runnablec.BuildRegisterPayload(*runnableRegisterBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = runnablec.BuildGetPayload(*runnableGetRunnableNameOrIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// codesetUsage displays the usage of the codeset command and its subcommands.
func codesetUsage() {
	fmt.Fprintf(os.Stderr, `The codeset service performs operations on Codesets.
Usage:
    %s [globalflags] codeset COMMAND [flags]

COMMAND:
    list: Retrieve information about Codesets registered in FuseML.
    register: Register a Codeset with the FuseML codeset store.
    get: Retrieve an Codeset from FuseML.

Additional help:
    %s codeset COMMAND --help
`, os.Args[0], os.Args[0])
}
func codesetListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] codeset list -project STRING -label STRING

Retrieve information about Codesets registered in FuseML.
    -project STRING: 
    -label STRING: 

Example:
    `+os.Args[0]+` codeset list --project "mlflow-project-01" --label "mlflow"
`, os.Args[0])
}

func codesetRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] codeset register -body JSON

Register a Codeset with the FuseML codeset store.
    -body JSON: 

Example:
    `+os.Args[0]+` codeset register --body '{
      "description": "My first MLFlow application with FuseML",
      "label": "mlflow",
      "location": "work/ml/mlflow-code",
      "name": "mlflow-app-01",
      "project": "mlflow-project-01"
   }'
`, os.Args[0])
}

func codesetGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] codeset get -project STRING -name STRING

Retrieve an Codeset from FuseML.
    -project STRING: Project name
    -name STRING: Codeset name

Example:
    `+os.Args[0]+` codeset get --project "mlflow-project-01" --name "mlflow-app-01"
`, os.Args[0])
}

// runnableUsage displays the usage of the runnable command and its subcommands.
func runnableUsage() {
	fmt.Fprintf(os.Stderr, `The runable service performs operations on runnables.
Usage:
    %s [globalflags] runnable COMMAND [flags]

COMMAND:
    list: Retrieve information about runnables registered in FuseML.
    register: Register a runnable with the FuseML runnable store.
    get: Retrieve an Runnable from FuseML.

Additional help:
    %s runnable COMMAND --help
`, os.Args[0], os.Args[0])
}
func runnableListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable list -kind STRING

Retrieve information about runnables registered in FuseML.
    -kind STRING: 

Example:
    `+os.Args[0]+` runnable list --kind "builder"
`, os.Args[0])
}

func runnableRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable register -body JSON

Register a runnable with the FuseML runnable store.
    -body JSON: 

Example:
    `+os.Args[0]+` runnable register --body '{
      "created": "2021-04-09T06:17:25Z",
      "id": "288BFD74-D973-18B5-FAA5-29ADF4569AC7",
      "image": {
         "registryUrl": "myregistry.io",
         "repository": "example/builder",
         "tag": "1.0"
      },
      "inputs": [
         {
            "kind": "parameter",
            "name": "Input1",
            "parameter": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         },
         {
            "kind": "parameter",
            "name": "Input1",
            "parameter": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         }
      ],
      "kind": "trainer",
      "labels": [
         "trainer"
      ],
      "name": "MyTrainer",
      "outputs": [
         {
            "kind": "model",
            "metadata": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "name": "Output1",
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         },
         {
            "kind": "model",
            "metadata": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "name": "Output1",
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         }
      ]
   }'
`, os.Args[0])
}

func runnableGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable get -runnable-name-or-id STRING

Retrieve an Runnable from FuseML.
    -runnable-name-or-id STRING: Runnable name or id

Example:
    `+os.Args[0]+` runnable get --runnable-name-or-id "288BFD74-D973-18B5-FAA5-29ADF4569AC7"
`, os.Args[0])
}
