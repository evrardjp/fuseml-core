// Code generated by goa v3.3.1, DO NOT EDIT.
//
// fuseml-core HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	runnablec "github.com/fuseml/fuseml-core/gen/http/runnable/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `runnable (list|register|get)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` runnable list --kind "builder"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		runnableFlags = flag.NewFlagSet("runnable", flag.ContinueOnError)

		runnableListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		runnableListKindFlag = runnableListFlags.String("kind", "", "")

		runnableRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		runnableRegisterBodyFlag = runnableRegisterFlags.String("body", "REQUIRED", "")

		runnableGetFlags                = flag.NewFlagSet("get", flag.ExitOnError)
		runnableGetRunnableNameOrIDFlag = runnableGetFlags.String("runnable-name-or-id", "REQUIRED", "Runnable name or id")
	)
	runnableFlags.Usage = runnableUsage
	runnableListFlags.Usage = runnableListUsage
	runnableRegisterFlags.Usage = runnableRegisterUsage
	runnableGetFlags.Usage = runnableGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "runnable":
			svcf = runnableFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "runnable":
			switch epn {
			case "list":
				epf = runnableListFlags

			case "register":
				epf = runnableRegisterFlags

			case "get":
				epf = runnableGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "runnable":
			c := runnablec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = runnablec.BuildListPayload(*runnableListKindFlag)
			case "register":
				endpoint = c.Register()
				data, err = runnablec.BuildRegisterPayload(*runnableRegisterBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = runnablec.BuildGetPayload(*runnableGetRunnableNameOrIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// runnableUsage displays the usage of the runnable command and its subcommands.
func runnableUsage() {
	fmt.Fprintf(os.Stderr, `The runable service performs operations on runnables.
Usage:
    %s [globalflags] runnable COMMAND [flags]

COMMAND:
    list: Retrieve information about runnables registered in FuseML.
    register: Register a runnable with the FuseML runnable store.
    get: Retrieve an Runnable from FuseML.

Additional help:
    %s runnable COMMAND --help
`, os.Args[0], os.Args[0])
}
func runnableListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable list -kind STRING

Retrieve information about runnables registered in FuseML.
    -kind STRING: 

Example:
    `+os.Args[0]+` runnable list --kind "builder"
`, os.Args[0])
}

func runnableRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable register -body JSON

Register a runnable with the FuseML runnable store.
    -body JSON: 

Example:
    `+os.Args[0]+` runnable register --body '{
      "created": "2014-10-25T06:06:51Z",
      "id": "FF1D889F-0741-6290-783B-66E606310D86",
      "image": {
         "registryUrl": "Quidem hic sapiente quasi quia explicabo.",
         "repository": "Et esse.",
         "tag": "Consectetur ex doloribus qui."
      },
      "inputs": [
         {
            "kind": "Minus aut.",
            "name": "Incidunt vitae illum eveniet.",
            "parameter": {
               "datatype": "Debitis ut provident voluptatibus sit laudantium.",
               "default": "Rem eum.",
               "optional": true
            },
            "runnable": {
               "kind": "Et mollitia iste libero sapiente sint et.",
               "labels": [
                  "Dolor nulla aut voluptatibus qui nihil.",
                  "Placeat ipsum aut.",
                  "A enim tempora sapiente debitis sint ut.",
                  "Eligendi porro."
               ],
               "name": "Enim dolorum."
            }
         },
         {
            "kind": "Minus aut.",
            "name": "Incidunt vitae illum eveniet.",
            "parameter": {
               "datatype": "Debitis ut provident voluptatibus sit laudantium.",
               "default": "Rem eum.",
               "optional": true
            },
            "runnable": {
               "kind": "Et mollitia iste libero sapiente sint et.",
               "labels": [
                  "Dolor nulla aut voluptatibus qui nihil.",
                  "Placeat ipsum aut.",
                  "A enim tempora sapiente debitis sint ut.",
                  "Eligendi porro."
               ],
               "name": "Enim dolorum."
            }
         }
      ],
      "kind": "Aut tempora.",
      "labels": [
         "Atque non in velit sint.",
         "Laborum natus."
      ],
      "name": "Accusamus in iure possimus sed quod.",
      "outputs": [
         {
            "kind": "Et similique suscipit laborum porro praesentium.",
            "metadata": {
               "datatype": "Debitis ut provident voluptatibus sit laudantium.",
               "default": "Rem eum.",
               "optional": true
            },
            "name": "Atque blanditiis libero minima.",
            "runnable": {
               "kind": "Et mollitia iste libero sapiente sint et.",
               "labels": [
                  "Dolor nulla aut voluptatibus qui nihil.",
                  "Placeat ipsum aut.",
                  "A enim tempora sapiente debitis sint ut.",
                  "Eligendi porro."
               ],
               "name": "Enim dolorum."
            }
         },
         {
            "kind": "Et similique suscipit laborum porro praesentium.",
            "metadata": {
               "datatype": "Debitis ut provident voluptatibus sit laudantium.",
               "default": "Rem eum.",
               "optional": true
            },
            "name": "Atque blanditiis libero minima.",
            "runnable": {
               "kind": "Et mollitia iste libero sapiente sint et.",
               "labels": [
                  "Dolor nulla aut voluptatibus qui nihil.",
                  "Placeat ipsum aut.",
                  "A enim tempora sapiente debitis sint ut.",
                  "Eligendi porro."
               ],
               "name": "Enim dolorum."
            }
         },
         {
            "kind": "Et similique suscipit laborum porro praesentium.",
            "metadata": {
               "datatype": "Debitis ut provident voluptatibus sit laudantium.",
               "default": "Rem eum.",
               "optional": true
            },
            "name": "Atque blanditiis libero minima.",
            "runnable": {
               "kind": "Et mollitia iste libero sapiente sint et.",
               "labels": [
                  "Dolor nulla aut voluptatibus qui nihil.",
                  "Placeat ipsum aut.",
                  "A enim tempora sapiente debitis sint ut.",
                  "Eligendi porro."
               ],
               "name": "Enim dolorum."
            }
         }
      ]
   }'
`, os.Args[0])
}

func runnableGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable get -runnable-name-or-id STRING

Retrieve an Runnable from FuseML.
    -runnable-name-or-id STRING: Runnable name or id

Example:
    `+os.Args[0]+` runnable get --runnable-name-or-id "Aut omnis similique eum."
`, os.Args[0])
}
