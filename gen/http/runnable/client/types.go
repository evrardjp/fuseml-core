// Code generated by goa v3.3.1, DO NOT EDIT.
//
// runnable HTTP client types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	runnable "github.com/fuseml/fuseml-core/gen/runnable"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "runnable" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// The ID of the runnable
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the runnable
	Name string `form:"name" json:"name" xml:"name"`
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind string `form:"kind" json:"kind" xml:"kind"`
	// The OCI container image associated with the runnable
	Image *RunnableImageRequestBody `form:"image" json:"image" xml:"image"`
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInputRequestBody `form:"inputs" json:"inputs" xml:"inputs"`
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutputRequestBody `form:"outputs" json:"outputs" xml:"outputs"`
	// The runnable's creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Labels associated with the runnable
	Labels []string `form:"labels" json:"labels" xml:"labels"`
}

// ListResponseBody is the type of the "runnable" service "list" endpoint HTTP
// response body.
type ListResponseBody []*RunnableResponse

// RegisterResponseBody is the type of the "runnable" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// The ID of the runnable
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the runnable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// The OCI container image associated with the runnable
	Image *RunnableImageResponseBody `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInputResponseBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutputResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// The runnable's creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Labels associated with the runnable
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// GetResponseBody is the type of the "runnable" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// The ID of the runnable
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the runnable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// The OCI container image associated with the runnable
	Image *RunnableImageResponseBody `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInputResponseBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutputResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// The runnable's creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Labels associated with the runnable
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// ListNotFoundResponseBody is the type of the "runnable" service "list"
// endpoint HTTP response body for the "NotFound" error.
type ListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RegisterBadRequestResponseBody is the type of the "runnable" service
// "register" endpoint HTTP response body for the "BadRequest" error.
type RegisterBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBadRequestResponseBody is the type of the "runnable" service "get"
// endpoint HTTP response body for the "BadRequest" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetNotFoundResponseBody is the type of the "runnable" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RunnableResponse is used to define fields on response body types.
type RunnableResponse struct {
	// The ID of the runnable
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The name of the runnable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// The OCI container image associated with the runnable
	Image *RunnableImageResponse `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInputResponse `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutputResponse `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// The runnable's creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Labels associated with the runnable
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// RunnableImageResponse is used to define fields on response body types.
type RunnableImageResponse struct {
	// The URL for the external registry where the image is stored (empty for
	// internal images)
	RegistryURL *string `form:"registryUrl,omitempty" json:"registryUrl,omitempty" xml:"registryUrl,omitempty"`
	// The image repository
	Repository *string `form:"repository,omitempty" json:"repository,omitempty" xml:"repository,omitempty"`
	// The image tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty" xml:"tag,omitempty"`
}

// RunnableInputResponse is used to define fields on response body types.
type RunnableInputResponse struct {
	// Input name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Kind of input (e.g. runnable, dataset, model, parameter, etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable reference
	Runnable *RunnableRefResponse `form:"runnable,omitempty" json:"runnable,omitempty" xml:"runnable,omitempty"`
	// Parameter description
	Parameter *InputParameterResponse `form:"parameter,omitempty" json:"parameter,omitempty" xml:"parameter,omitempty"`
}

// RunnableRefResponse is used to define fields on response body types.
type RunnableRefResponse struct {
	// Runnable name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Runnable kind
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// InputParameterResponse is used to define fields on response body types.
type InputParameterResponse struct {
	// Parameter data type
	Datatype *string `form:"datatype,omitempty" json:"datatype,omitempty" xml:"datatype,omitempty"`
	// Optional parameter
	Optional *bool `form:"optional,omitempty" json:"optional,omitempty" xml:"optional,omitempty"`
	// Default value
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
}

// RunnableOutputResponse is used to define fields on response body types.
type RunnableOutputResponse struct {
	// Output name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Kind of output (e.g. runnable, dataset, model, metatada, etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable reference
	Runnable *RunnableRefResponse `form:"runnable,omitempty" json:"runnable,omitempty" xml:"runnable,omitempty"`
	// Metadata description
	Metadata *InputParameterResponse `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// RunnableImageRequestBody is used to define fields on request body types.
type RunnableImageRequestBody struct {
	// The URL for the external registry where the image is stored (empty for
	// internal images)
	RegistryURL *string `form:"registryUrl,omitempty" json:"registryUrl,omitempty" xml:"registryUrl,omitempty"`
	// The image repository
	Repository *string `form:"repository,omitempty" json:"repository,omitempty" xml:"repository,omitempty"`
	// The image tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty" xml:"tag,omitempty"`
}

// RunnableInputRequestBody is used to define fields on request body types.
type RunnableInputRequestBody struct {
	// Input name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Kind of input (e.g. runnable, dataset, model, parameter, etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable reference
	Runnable *RunnableRefRequestBody `form:"runnable,omitempty" json:"runnable,omitempty" xml:"runnable,omitempty"`
	// Parameter description
	Parameter *InputParameterRequestBody `form:"parameter,omitempty" json:"parameter,omitempty" xml:"parameter,omitempty"`
}

// RunnableRefRequestBody is used to define fields on request body types.
type RunnableRefRequestBody struct {
	// Runnable name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Runnable kind
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// InputParameterRequestBody is used to define fields on request body types.
type InputParameterRequestBody struct {
	// Parameter data type
	Datatype *string `form:"datatype,omitempty" json:"datatype,omitempty" xml:"datatype,omitempty"`
	// Optional parameter
	Optional *bool `form:"optional,omitempty" json:"optional,omitempty" xml:"optional,omitempty"`
	// Default value
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
}

// RunnableOutputRequestBody is used to define fields on request body types.
type RunnableOutputRequestBody struct {
	// Output name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Kind of output (e.g. runnable, dataset, model, metatada, etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable reference
	Runnable *RunnableRefRequestBody `form:"runnable,omitempty" json:"runnable,omitempty" xml:"runnable,omitempty"`
	// Metadata description
	Metadata *InputParameterRequestBody `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// RunnableImageResponseBody is used to define fields on response body types.
type RunnableImageResponseBody struct {
	// The URL for the external registry where the image is stored (empty for
	// internal images)
	RegistryURL *string `form:"registryUrl,omitempty" json:"registryUrl,omitempty" xml:"registryUrl,omitempty"`
	// The image repository
	Repository *string `form:"repository,omitempty" json:"repository,omitempty" xml:"repository,omitempty"`
	// The image tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty" xml:"tag,omitempty"`
}

// RunnableInputResponseBody is used to define fields on response body types.
type RunnableInputResponseBody struct {
	// Input name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Kind of input (e.g. runnable, dataset, model, parameter, etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable reference
	Runnable *RunnableRefResponseBody `form:"runnable,omitempty" json:"runnable,omitempty" xml:"runnable,omitempty"`
	// Parameter description
	Parameter *InputParameterResponseBody `form:"parameter,omitempty" json:"parameter,omitempty" xml:"parameter,omitempty"`
}

// RunnableRefResponseBody is used to define fields on response body types.
type RunnableRefResponseBody struct {
	// Runnable name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Runnable kind
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable labels
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// InputParameterResponseBody is used to define fields on response body types.
type InputParameterResponseBody struct {
	// Parameter data type
	Datatype *string `form:"datatype,omitempty" json:"datatype,omitempty" xml:"datatype,omitempty"`
	// Optional parameter
	Optional *bool `form:"optional,omitempty" json:"optional,omitempty" xml:"optional,omitempty"`
	// Default value
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
}

// RunnableOutputResponseBody is used to define fields on response body types.
type RunnableOutputResponseBody struct {
	// Output name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Kind of output (e.g. runnable, dataset, model, metatada, etc.)
	Kind *string `form:"kind,omitempty" json:"kind,omitempty" xml:"kind,omitempty"`
	// Runnable reference
	Runnable *RunnableRefResponseBody `form:"runnable,omitempty" json:"runnable,omitempty" xml:"runnable,omitempty"`
	// Metadata description
	Metadata *InputParameterResponseBody `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "runnable" service.
func NewRegisterRequestBody(p *runnable.Runnable) *RegisterRequestBody {
	body := &RegisterRequestBody{
		ID:      p.ID,
		Name:    p.Name,
		Kind:    p.Kind,
		Created: p.Created,
	}
	if p.Image != nil {
		body.Image = marshalRunnableRunnableImageToRunnableImageRequestBody(p.Image)
	}
	if p.Inputs != nil {
		body.Inputs = make([]*RunnableInputRequestBody, len(p.Inputs))
		for i, val := range p.Inputs {
			body.Inputs[i] = marshalRunnableRunnableInputToRunnableInputRequestBody(val)
		}
	}
	if p.Outputs != nil {
		body.Outputs = make([]*RunnableOutputRequestBody, len(p.Outputs))
		for i, val := range p.Outputs {
			body.Outputs[i] = marshalRunnableRunnableOutputToRunnableOutputRequestBody(val)
		}
	}
	if p.Labels != nil {
		body.Labels = make([]string, len(p.Labels))
		for i, val := range p.Labels {
			body.Labels[i] = val
		}
	}
	return body
}

// NewListRunnableOK builds a "runnable" service "list" endpoint result from a
// HTTP "OK" response.
func NewListRunnableOK(body []*RunnableResponse) []*runnable.Runnable {
	v := make([]*runnable.Runnable, len(body))
	for i, val := range body {
		v[i] = unmarshalRunnableResponseToRunnableRunnable(val)
	}
	return v
}

// NewListNotFound builds a runnable service list endpoint NotFound error.
func NewListNotFound(body *ListNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRegisterRunnableCreated builds a "runnable" service "register" endpoint
// result from a HTTP "Created" response.
func NewRegisterRunnableCreated(body *RegisterResponseBody) *runnable.Runnable {
	v := &runnable.Runnable{
		ID:      body.ID,
		Name:    *body.Name,
		Kind:    *body.Kind,
		Created: body.Created,
	}
	v.Image = unmarshalRunnableImageResponseBodyToRunnableRunnableImage(body.Image)
	v.Inputs = make([]*runnable.RunnableInput, len(body.Inputs))
	for i, val := range body.Inputs {
		v.Inputs[i] = unmarshalRunnableInputResponseBodyToRunnableRunnableInput(val)
	}
	v.Outputs = make([]*runnable.RunnableOutput, len(body.Outputs))
	for i, val := range body.Outputs {
		v.Outputs[i] = unmarshalRunnableOutputResponseBodyToRunnableRunnableOutput(val)
	}
	v.Labels = make([]string, len(body.Labels))
	for i, val := range body.Labels {
		v.Labels[i] = val
	}

	return v
}

// NewRegisterBadRequest builds a runnable service register endpoint BadRequest
// error.
func NewRegisterBadRequest(body *RegisterBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetRunnableOK builds a "runnable" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetRunnableOK(body *GetResponseBody) *runnable.Runnable {
	v := &runnable.Runnable{
		ID:      body.ID,
		Name:    *body.Name,
		Kind:    *body.Kind,
		Created: body.Created,
	}
	v.Image = unmarshalRunnableImageResponseBodyToRunnableRunnableImage(body.Image)
	v.Inputs = make([]*runnable.RunnableInput, len(body.Inputs))
	for i, val := range body.Inputs {
		v.Inputs[i] = unmarshalRunnableInputResponseBodyToRunnableRunnableInput(val)
	}
	v.Outputs = make([]*runnable.RunnableOutput, len(body.Outputs))
	for i, val := range body.Outputs {
		v.Outputs[i] = unmarshalRunnableOutputResponseBodyToRunnableRunnableOutput(val)
	}
	v.Labels = make([]string, len(body.Labels))
	for i, val := range body.Labels {
		v.Labels[i] = val
	}

	return v
}

// NewGetBadRequest builds a runnable service get endpoint BadRequest error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetNotFound builds a runnable service get endpoint NotFound error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateRegisterResponseBody runs the validations defined on
// RegisterResponseBody
func ValidateRegisterResponseBody(body *RegisterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
	}
	if body.Inputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inputs", "body"))
	}
	if body.Outputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("outputs", "body"))
	}
	if body.Labels == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("labels", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
	}
	if body.Inputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inputs", "body"))
	}
	if body.Outputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("outputs", "body"))
	}
	if body.Labels == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("labels", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_NotFound_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRegisterBadRequestResponseBody runs the validations defined on
// register_BadRequest_response_body
func ValidateRegisterBadRequestResponseBody(body *RegisterBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_BadRequest_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_NotFound_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRunnableResponse runs the validations defined on RunnableResponse
func ValidateRunnableResponse(body *RunnableResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("kind", "body"))
	}
	if body.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
	}
	if body.Inputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inputs", "body"))
	}
	if body.Outputs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("outputs", "body"))
	}
	if body.Labels == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("labels", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
	}
	return
}
