// Code generated by goa v3.3.1, DO NOT EDIT.
//
// runnable service
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package runnable

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The runable service performs operations on runnables.
type Service interface {
	// Retrieve information about runnables registered in FuseML.
	List(context.Context, *ListPayload) (res []*Runnable, err error)
	// Register a runnable with the FuseML runnable store.
	Register(context.Context, *Runnable) (res *Runnable, err error)
	// Retrieve an Runnable from FuseML.
	Get(context.Context, *GetPayload) (res *Runnable, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "runnable"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"list", "register", "get"}

// ListPayload is the payload type of the runnable service list method.
type ListPayload struct {
	// The runnable's id
	ID *string
}

// Runnable descriptor
type Runnable struct {
	// The ID of the runnable
	ID *string
	// The name of the runnable
	Name string
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind string
	// The OCI container image associated with the runnable
	Image *RunnableImage
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInput
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutput
	// The runnable's creation time
	Created *string
	// Labels associated with the runnable
	Labels []string
}

// GetPayload is the payload type of the runnable service get method.
type GetPayload struct {
	// Runnable name or id
	RunnableNameOrID string
}

type RunnableImage struct {
	// The URL for the external registry where the image is stored (empty for
	// internal images)
	RegistryURL *string
	// The image repository
	Repository *string
	// The image tag
	Tag *string
}

type RunnableInput struct {
	// Input name
	Name *string
	// Kind of input (e.g. runnable, dataset, model, parameter, etc.)
	Kind *string
	// Runnable reference
	Runnable *RunnableRef
	// Parameter description
	Parameter *InputParameter
}

type RunnableRef struct {
	// Runnable name
	Name *string
	// Runnable kind
	Kind *string
	// Runnable labels
	Labels []string
}

type InputParameter struct {
	// Parameter data type
	Datatype *string
	// Optional parameter
	Optional *bool
	// Default value
	Default *string
}

type RunnableOutput struct {
	// Output name
	Name *string
	// Kind of output (e.g. runnable, dataset, model, metatada, etc.)
	Kind *string
	// Runnable reference
	Runnable *RunnableRef
	// Metadata description
	Metadata *InputParameter
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
