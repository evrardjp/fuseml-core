package domain

import (
	"context"
	"time"
)

const (
	// LocalRegistryHostname - Container image location values may use this identifier as a hostname to indicate
	// that they are stored internally in the local OCI registry managed by fuseml
	LocalRegistryHostname = "fuseml.local"
)

// RunnableKind encodes valid values that can be assigned to the Runnable.Kind field
type RunnableKind string

// Valid values that can be used with RunnableKind
const (
	RKCustom    RunnableKind = "custom"
	RKBuilder                = "builder"
	RKTrainer                = "trainer"
	RKPredictor              = "predictor"
)

// ArtifactProvider encodes valid values that can be assigned to the RunnableArtifactArgDesc.Provider field
type ArtifactProvider string

// Valid values that can be used with ArtifactProvider
const (
	APLocal  ArtifactProvider = "local"
	APInline                  = "inline"
	APFuseml                  = "fuseml"
	APS3                      = "s3"
	APGCS                     = "gcs"
	APAzure                   = "azure"
	APGIT                     = "git"
	APNFS                     = "nfs"
	APFTP                     = "ftp"
	APSFTP                    = "sftp"
	APHTTP                    = "http"
	APHTTPS                   = "https"
	APHDFS                    = "hdfs"
	APOCI                     = "oci"
)

// RunnableArtifactArgDimension encodes valid values that can be assigned to the RunnableArtifactArgDesc.Dimension field
type RunnableArtifactArgDimension string

// Valid values that can be used with RunnableArtifactArgDimension
const (
	RAADSingle RunnableArtifactArgDimension = "single"
	RAADArray                               = "array"
)

// Runnable descriptor
type Runnable struct {
	// Unique runnable ID
	ID string
	// The runnable's creation time
	Created time.Time
	// Optional description
	Description string
	// The author
	Author string
	// The URL for sources used to build the runnable
	Source string
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind string
	// Runnable implementation details
	// TODO: consider having several implementation flavors - e.g. several container images,
	// all able to accept the same set of inputs/outputs, but built using diferent software,
	// each targeting a different type of hardware resource that it can consume (e.g. one image
	// for generic CPUs, one for GPUs from vendor X, one for TPUs from vendor Y etc.). This example
	// cannot be modeled using one image and input parameters because the different sofware requirements
	// can't coexist in the same container image.
	Container RunnableContainer
	// Map of inputs - artifacts or parameters - accepted by this runnable, indexed by name
	Inputs map[string]interface{}
	// Map of outputs - artifacts or parameters - generated by this runnable, indexed by name
	Outputs map[string]interface{}
	// Default root container path where the container expects input parameter values and/or artifact contents
	// to be provided by the framework
	DefaultInputPath string
	// Default root container path where the container expects to provide output parameter values and/or
	// artifact contents back to the framework
	DefaultOutputPath string
	// Labels describing global capabilities, requirements etc. These labels can be used to run queries
	// and to validate which runnables can be used in workflow templates.
	Labels map[string]string
}

// RunnableContainer describes the container implementation of a runnable
type RunnableContainer struct {
	// The container image associated with this runnable
	Image string
	// This flag indicates that the image is stored in the built-in container registry and the registry
	// hostname is not included in the image location
	LocalImage bool
	// Environment variables
	Env map[string]string
	// Entrypoint
	Entrypoint string
	// Entrypoint arguments
	Args []string
}

// RunnableArgDesc is a descriptor common to all runnable inputs/outputs
type RunnableArgDesc struct {
	// Unique name
	Name string
	// Optional description
	Description string
	// Labels describing custom properties or property requirements; these are hints used in matching
	// inputs with outputs when deciding how runnables can be connected together to form more complex
	// workflows. Regular expressions may be used instead of explicit label values.
	Labels map[string]string
}

// RunnableInputParameter is the runnable input parameter definition
type RunnableInputParameter struct {
	RunnableArgDesc
	// Marks an optional input parameter. A default value must also be supplied.
	Optional bool
	// Default parameter value - used for optional input parameters when the value is not provided explicitly
	DefaultValue string
	// Optional container path where the parameter value is passed by the framework to the container. This method
	// can be used for example when the parameter value represents the contents of a configuration or script.
	Path string
}

// RunnableOutputParameter is the runnable output parameter definition
type RunnableOutputParameter struct {
	RunnableArgDesc
	// Marks an optional output parameter. A default value must also be supplied.
	Optional bool
	// Default parameter value - used for optional output parameters when the value is not provided by the runnable implementation
	DefaultValue string
	// Custom container path where the parameter value is provided by the container.
	Path string
}

// RunnableArtifactArgDesc is a descriptor common to all runnable inputs/outputs of type artifact
type RunnableArtifactArgDesc struct {
	RunnableArgDesc
	// Data passing mechanisms supported by the runnable implementation used to provide the artifact's contents to the container
	Provider []ArtifactProvider
	// Argument dimension
	Dimension RunnableArtifactArgDimension
}

// RunnableInputArtifact is a generic runnable input artifact definition
type RunnableInputArtifact struct {
	RunnableArtifactArgDesc
	// Marks an optional input artifact
	Optional bool
	// Custom container path where the artifact contents or the artifact URL(s) are provided to the container
	Path string
}

// RunnableOutputArtifact is a generic runnable output artifact definition
type RunnableOutputArtifact struct {
	RunnableArtifactArgDesc
	// Marks an optional output artifact
	Optional bool
	// Custom container path where the artifact contents or the artifact URL(s) are provided by the container
	Path string
}

// RunnableCodesetArtifact holds information about a codeset artifact used as input/output
type RunnableCodesetArtifact struct {
	// The type of information contained in the codeset
	Type []string
	// The intended function of the codeset's contents
	Function []string
	// The format(s) used for the codeset's contents
	Format []string
	// Software packages, modules, libraries, toolkits etc. and optional semantic version or version requirements
	Requirements map[string]string
}

// RunnableModelArtifact holds information about a model artifact used as input/output
type RunnableModelArtifact struct {
	// The format used to package the model
	Format []string
	// Denotes a pre-trained model that is ready to use
	Pretrained bool
	// Method used to train the model
	Method string
	// Class of algorithm implemented by the model
	Class string
	// The intended function for the model
	Function string
	// Software packages, modules, libraries, toolkits etc. and optional semantic version or version requirements
	Requirements map[string]string
}

// RunnableDatasetArtifact holds information about a dataset artifact used as input/output
type RunnableDatasetArtifact struct {
	// The type of dataset
	Type []string
	// The dataset format
	Format []string
	// The compression used for the dataset
	Compression []string
}

// RunnableRunnableArtifact holds information about a runnable used as input/output
type RunnableRunnableArtifact struct {
	// The kind of runnable
	Kind string
}

// RunnableInputCodeset is a runnable input artifact of type codeset
type RunnableInputCodeset struct {
	RunnableInputArtifact
	RunnableCodesetArtifact
}

// RunnableOutputCodeset is a runnable output artifact of type codeset
type RunnableOutputCodeset struct {
	RunnableOutputArtifact
	RunnableCodesetArtifact
}

// RunnableInputModel is a runnable input artifact of type model
type RunnableInputModel struct {
	RunnableInputArtifact
	RunnableModelArtifact
}

// RunnableOutputModel is a runnable output artifact of type model
type RunnableOutputModel struct {
	RunnableOutputArtifact
	RunnableModelArtifact
}

// RunnableInputDataset is a runnable input artifact of type dataset
type RunnableInputDataset struct {
	RunnableInputArtifact
	RunnableDatasetArtifact
}

// RunnableOutputDataset is a runnable output artifact of type dataset
type RunnableOutputDataset struct {
	RunnableOutputArtifact
	RunnableDatasetArtifact
}

// RunnableInputRunnable is a runnable input artifact of type runnable
type RunnableInputRunnable struct {
	RunnableInputArtifact
	RunnableRunnableArtifact
}

// RunnableOutputRunnable is a runnable output artifact of type runnable
type RunnableOutputRunnable struct {
	RunnableOutputArtifact
	RunnableRunnableArtifact
}

// RunnableStore defines the public interface that needs to be implemented by all runnable stores
type RunnableStore interface {
	Find(ctx context.Context, id string, kind string, labels map[string]string) (res []*Runnable, err error)
	Register(ctx context.Context, r *Runnable) (res *Runnable, err error)
	Get(ctx context.Context, name string) (res *Runnable, err error)
}
