package domain

import (
	"context"
	"time"
)

const (
	// Container image location values may use this identifier as a hostname to indicate
	// that they are stored internally in the local OCI registry managed by fuseml
	LOCAL_REGISTRY_HOSTNAME = "fuseml.local"
)

type RunnableKind string

const (
	RK_CUSTOM    RunnableKind = "custom"
	RK_BUILDER   RunnableKind = "builder"
	RK_TRAINER   RunnableKind = "trainer"
	RK_PREDICTOR RunnableKind = "predictor"
)

type RunnableArgumentType string

const (
	RAT_PARAM    RunnableArgumentType = "param"
	RAT_OPAQUE   RunnableArgumentType = "opaque"
	RAT_CODESET  RunnableArgumentType = "codeset"
	RAT_RUNNABLE RunnableArgumentType = "runnable"
	RAT_MODEL    RunnableArgumentType = "model"
	RAT_DATASET  RunnableArgumentType = "dataset"
)

type ArtifactStoreType string

const (
	// Artifact contents are provided inline as the input value
	AST_INLINE ArtifactStoreType = "inline"
	// Ephemeral, non-persistent storage is used to pass artifacts from one runnable to another
	// during the execution of a workflow
	AST_EPHEMERAL ArtifactStoreType = "ephemeral"
	AST_S3        ArtifactStoreType = "s3"
	AST_GS        ArtifactStoreType = "gs"
	AST_WASB      ArtifactStoreType = "wasb"
	AST_GIT       ArtifactStoreType = "git"
	AST_NFS       ArtifactStoreType = "nfs"
	AST_FTP       ArtifactStoreType = "ftp"
	AST_SFTP      ArtifactStoreType = "sftp"
	AST_HTTP      ArtifactStoreType = "http"
	AST_HTTPS     ArtifactStoreType = "https"
	AST_HDFS      ArtifactStoreType = "hdfs"
	AST_OCI       ArtifactStoreType = "oci"
)

// Runnable descriptor
type Runnable struct {
	// The runnable's creation time
	Created time.Time
	// Unique runnable ID
	Id string
	// Optional description
	Description string
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind string
	// Runnable implementation details
	// TODO: consider having several implementation flavors - e.g. several container images,
	// all able to accept the same set of inputs/outputs, but built using diferent software,
	// each targeting a different type of hardware resource that it can consume (e.g. one image
	// for generic CPUs, one for GPUs from vendor X, one for TPUs from vendor Y etc.). This example
	// cannot be modeled using one image and input parameters because the different sofware requirements
	// can't coexist in the same container image.
	Container RunnableContainer
	// Map of inputs - artifacts or parameters - accepted by this runnable, indexed by name
	Inputs map[string]*RunnableInput
	// Default root container path where the container expects input parameter values and/or artifact contents
	// to be provided by the framework
	DefaultInputPath string
	// Map of outputs - artifacts or parameters - generated by this runnable, indexed by name
	Outputs map[string]*RunnableOutput
	// Default root container path where the container expects to provide output parameter values and/or
	// artifact contents back to the framework
	DefaultOutputPath string
	// Labels describing global capabilities, requirements etc. These labels can be used to run queries
	// and to validate which runnables can be used in workflow templates.
	Labels map[string]string
}

// Runnable container implementation
type RunnableContainer struct {
	// The container image associated with this runnable
	Image string
	// This flag indicates that the image is stored in the built-in container registry and the registry
	// hostname is not included in the image location
	LocalImage bool
	// Environment variables
	Env map[string]string
	// Entrypoint
	Entrypoint string
	// Entrypoint arguments
	Args []string
}

// Runnable input definition
type RunnableInput struct {
	// Type of input (e.g. parameter or artifact: opaque, codeset, dataset, model, etc.)
	Type RunnableArgumentType
	// Input name
	Name string
	// Optional input description
	Description string
	// Marks an optional input. If an optional input references a resource and the resource specifier doesn't
	// match any resource, this won't prevent the runnable from being executed
	Optional bool
	// Default parameter value - used for optional input parameters when the value is not provided explicitly
	DefaultValue string
	// Artifact descriptor. Only present for artifacts
	Artifact *RunnableArtifactSpec
	// The strategy used to pass input values from the framework to the container
	ValuePass ValuePassStrategy
	// Labels describing custom properties that the input must provide; these can be used as hints when matching
	// against labels provided by outputs listed by other runnables, when deciding how runnables can be
	// connected together to form more complex workflows.
	// When the input is a fuseml artifact, these labels are further used to filter artifacts that can be used
	// as input
	Labels map[string]string
}

// Runnable output definition
type RunnableOutput struct {
	// Type of output (e.g. parameter or artifact: opaque, codeset, dataset, model, etc.)
	Type RunnableArgumentType
	// Output name
	Name string
	// Optional output description
	Description string
	// Artifact descriptor. Only set for artifacts.
	Artifact *RunnableArtifactSpec
	// The strategy used to pass output values from the container to the framework
	ValuePass ValuePassStrategy
	// Labels describing custom properties provided by the output; these can be used as hints when matching
	// against labels required by inputs listed by other runnables when deciding how runnables can be
	// connected together to form more complex workflows.
	// When the output is a fuseml artifact, these labels are further used to tag generated artifacts
	Labels map[string]string
}

type PassByMode string

const (
	PBM_VALUE     PassByMode = "value"
	PBM_REFERENCE PassByMode = "reference"
)

type ValuePassStrategy struct {
	// Controls if the full parameter value or artifact contents are exchanged between the container and the framework,
	// or just a reference to the artifact contents.
	PassBy PassByMode

	// For inputs:
	// - container path where the container expects the framework to supply the input value (parameter value, artifact
	// reference or artifact contents).
	// - if an input artifact selector is resolved to several artifacts, each matching artifact or artifact reference
	// is provided as a separate file or subdirectory.
	// For outputs:
	// - container path where the container provides the output value (parameter value, artifact reference or artifact
	// contents) back to the framework.
	// - if the container generates several artifacts, each artifact or artifact reference must be provided as separate
	// file or subdirectory.
	Path string
}

// An artifact specifier; one or more fields may be set
type RunnableArtifactSpec struct {
	// Artifact store type. Used with artifacts passed by reference to specify the type of artifact store client
	// (e.g. git, s3, ftp) that is supported by the container
	StoreType ArtifactStoreType
	// Artifact store name or wildcard
	Store string
	// Project name
	Project string
	// Artifact name or wildcard
	Name string
	// Artifact version or version wildcard
	Version string
	// Minimum number of artifact instances that the selector must match
	MinCount int
	// Maximum number of artifact instances that the selector must match
	MaxCount int
	// Artifact labels or label wildcards
	Labels map[string]string
}

type RunnableStore interface {
	Find(ctx context.Context, id string, kind []string, labels map[string]string) (res []*Runnable, err error)
	Register(ctx context.Context, r *Runnable) (res *Runnable, err error)
	Get(ctx context.Context, name string) (res *Runnable, err error)
}
