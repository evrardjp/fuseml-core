// Code generated by go-swagger; DO NOT EDIT.

package runnable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListRunnablesHandlerFunc turns a function with the right signature into a list runnables handler
type ListRunnablesHandlerFunc func(ListRunnablesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListRunnablesHandlerFunc) Handle(params ListRunnablesParams) middleware.Responder {
	return fn(params)
}

// ListRunnablesHandler interface for that can handle valid list runnables params
type ListRunnablesHandler interface {
	Handle(ListRunnablesParams) middleware.Responder
}

// NewListRunnables creates a new http.Handler for the list runnables operation
func NewListRunnables(ctx *middleware.Context, handler ListRunnablesHandler) *ListRunnables {
	return &ListRunnables{Context: ctx, Handler: handler}
}

/* ListRunnables swagger:route GET /runnables runnable listRunnables

Retrieve runnable information

Get information about runnables currently registered in the FuseML runnable store

*/
type ListRunnables struct {
	Context *middleware.Context
	Handler ListRunnablesHandler
}

func (o *ListRunnables) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListRunnablesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
