// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RunnableInput runnable input
//
// swagger:model RunnableInput
type RunnableInput struct {

	// Kind of input (e.g. runnable, dataset, model, parameter etc.)
	Kind string `json:"kind,omitempty"`

	// Input name
	Name string `json:"name,omitempty"`

	// Parameter description
	Parameter *InputParameter `json:"parameter,omitempty"`

	// Runnable reference
	Runnable *RunnableRef `json:"runnable,omitempty"`
}

// Validate validates this runnable input
func (m *RunnableInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunnable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunnableInput) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	if m.Parameter != nil {
		if err := m.Parameter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameter")
			}
			return err
		}
	}

	return nil
}

func (m *RunnableInput) validateRunnable(formats strfmt.Registry) error {
	if swag.IsZero(m.Runnable) { // not required
		return nil
	}

	if m.Runnable != nil {
		if err := m.Runnable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runnable")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this runnable input based on the context it is used
func (m *RunnableInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunnable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunnableInput) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameter != nil {
		if err := m.Parameter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameter")
			}
			return err
		}
	}

	return nil
}

func (m *RunnableInput) contextValidateRunnable(ctx context.Context, formats strfmt.Registry) error {

	if m.Runnable != nil {
		if err := m.Runnable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runnable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RunnableInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunnableInput) UnmarshalBinary(b []byte) error {
	var res RunnableInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
