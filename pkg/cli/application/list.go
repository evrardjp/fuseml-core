package application

import (
	"context"
	"os"

	applicationc "github.com/fuseml/fuseml-core/gen/http/application/client"
	"github.com/fuseml/fuseml-core/pkg/cli/client"
	"github.com/fuseml/fuseml-core/pkg/cli/common"
	"github.com/jedib0t/go-pretty/v6/table"
	"github.com/spf13/cobra"
)

// listOptions holds the options for 'application list' sub command
type listOptions struct {
	client.Clients
	global   *common.GlobalOptions
	format   *common.FormattingOptions
	Type     string
	Workflow string
}

func newListOptions(o *common.GlobalOptions) (res *listOptions) {
	res = &listOptions{global: o}
	res.format = common.NewFormattingOptions(
		[]string{"Name", "Type", "Description", "URL", "Workflow"},
		[]table.SortBy{{Name: "Name", Mode: table.Asc}, {Name: "Type", Mode: table.Asc}},
		common.OutputFormatters{},
	)

	return
}

// newSubCmdApplicationList creates and returns the cobra command for the `application list` CLI command
func newSubCmdApplicationList(gOpt *common.GlobalOptions) *cobra.Command {

	o := newListOptions(gOpt)

	cmd := &cobra.Command{
		Use:   "list [-t|--type TYPE] [-w|--workflow WORKFLOW]",
		Short: "List applications.",
		Long:  `Retrieve information about applications registered in FuseML`,
		Run: func(cmd *cobra.Command, args []string) {
			common.CheckErr(o.InitializeClients(gOpt.URL, gOpt.Timeout, gOpt.Verbose))
			common.CheckErr(o.validate())
			common.CheckErr(o.run())
		},
		Args: cobra.ExactArgs(0),
	}

	cmd.Flags().StringVarP(&o.Type, "type", "t", "", "list only applications of given type")
	cmd.Flags().StringVarP(&o.Workflow, "workflow", "w", "", "list only applications generated by given workflow")
	o.format.AddMultiValueFormattingFlags(cmd)

	return cmd
}

func (o *listOptions) validate() error {
	return nil
}

func (o *listOptions) run() error {
	request, err := applicationc.BuildListPayload(o.Type, o.Workflow)
	if err != nil {
		return err
	}

	response, err := o.ApplicationClient.List()(context.Background(), request)
	if err != nil {
		return err
	}

	o.format.FormatValue(os.Stdout, response)

	return nil
}
