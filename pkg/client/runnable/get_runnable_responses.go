// Code generated by go-swagger; DO NOT EDIT.

package runnable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fuseml/fuseml/core/pkg/models"
)

// GetRunnableReader is a Reader for the GetRunnable structure.
type GetRunnableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRunnableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRunnableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRunnableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRunnableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRunnableOK creates a GetRunnableOK with default headers values
func NewGetRunnableOK() *GetRunnableOK {
	return &GetRunnableOK{}
}

/* GetRunnableOK describes a response with status code 200, with default header values.

Return matching runnable resource
*/
type GetRunnableOK struct {
	Payload *models.Runnable
}

func (o *GetRunnableOK) Error() string {
	return fmt.Sprintf("[GET /runnables/{runnableNameOrId}][%d] getRunnableOK  %+v", 200, o.Payload)
}
func (o *GetRunnableOK) GetPayload() *models.Runnable {
	return o.Payload
}

func (o *GetRunnableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Runnable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnableBadRequest creates a GetRunnableBadRequest with default headers values
func NewGetRunnableBadRequest() *GetRunnableBadRequest {
	return &GetRunnableBadRequest{}
}

/* GetRunnableBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRunnableBadRequest struct {
}

func (o *GetRunnableBadRequest) Error() string {
	return fmt.Sprintf("[GET /runnables/{runnableNameOrId}][%d] getRunnableBadRequest ", 400)
}

func (o *GetRunnableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRunnableNotFound creates a GetRunnableNotFound with default headers values
func NewGetRunnableNotFound() *GetRunnableNotFound {
	return &GetRunnableNotFound{}
}

/* GetRunnableNotFound describes a response with status code 404, with default header values.

Runnable Not Found
*/
type GetRunnableNotFound struct {
}

func (o *GetRunnableNotFound) Error() string {
	return fmt.Sprintf("[GET /runnables/{runnableNameOrId}][%d] getRunnableNotFound ", 404)
}

func (o *GetRunnableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
