package design

import (
	. "goa.design/goa/v3/dsl"
)

var _ = Service("application", func() {
	Description("The aplication service performs operations on Applications.")

	Method("list", func() {
		Description("Retrieve information about Applications registered in FuseML.")
		Payload(func() {
			Field(1, "type", String, "List only Applications of given type", func() {
				Example("predictor")
			})
			Field(2, "workflow", String, "List only Applications generated by given workflow", func() {
				Example("mlflow-sklearn-e2e")
			})
		})

		Result(ArrayOf(Application), "Return all registered Applications matching the query.")

		Error("NotFound", func() {
			Description("If the Application is not found, should return 404 Not Found.")
		})

		HTTP(func() {
			GET("/applications")
			Param("type")
			Param("workflow")
			Response(StatusOK)
			Response("NotFound", StatusNotFound)
		})

		GRPC(func() {
			// Responses use a "OK" gRPC code.
			// The result is encoded in the response message (default).
			Response(CodeOK)
			Response("NotFound", CodeNotFound)
		})

	})

	Method("register", func() {
		Description("Register an Application with the FuseML application store.")

		Payload(Application)

		Error("BadRequest", func() {
			Description("If the Application does not have the required fields, should return 400 Bad Request.")
		})

		Result(Application)

		HTTP(func() {
			POST("/applications")
			Response(StatusCreated)
			Response("BadRequest", StatusBadRequest)
		})
		GRPC(func() {
			Response(CodeOK)
			Response("BadRequest", CodeInvalidArgument)
		})
	})

	Method("get", func() {
		Description("Retrieve an Application registered by FuseML.")

		Payload(func() {
			Field(1, "name", String, "Application name", func() {
				Example("mlflow-seldon-predictor-01")
			})
			Required("name")
		})

		Error("BadRequest", func() {
			Description("If name is not given, should return 400 Bad Request.")
		})
		Error("NotFound", func() {
			Description("If there is no application with the given name, should return 404 Not Found.")
		})

		Result(Application)

		HTTP(func() {
			GET("/applications/{name}")
			Response(StatusOK)
			Response("BadRequest", StatusBadRequest)
			Response("NotFound", StatusNotFound)
		})

		GRPC(func() {
			Response(CodeOK)
			Response("BadRequest", CodeInvalidArgument)
			Response("NotFound", CodeNotFound)
		})
	})

	Method("delete", func() {
		Description("Delete an Application registered by FuseML application store.")

		Payload(func() {
			Field(1, "name", String, "Application name", func() {
				Example("mlflow-seldon-predictor-01")
			})
			Required("name")
		})

		Error("BadRequest", func() {
			Description("If the Application does not have the required fields, should return 400 Bad Request.")
		})

		HTTP(func() {
			DELETE("/applications/{name}/")
			Response(StatusNoContent)
			Response("BadRequest", StatusBadRequest)
		})
		GRPC(func() {
			Response(CodeOK)
			Response("BadRequest", CodeInvalidArgument)
		})
	})

})

// Application describes the Application
var Application = Type("Application", func() {

	Field(1, "name", String, "The name of the Application", func() {
		Example("mlflow-seldon-predictor-01")
	})
	Field(2, "type", String, "The type of the Application", func() {
		Example("predictor")
	})
	Field(3, "description", String, "Application description", func() {
		Example("My MLFlow predictor deployed via Seldon")
	})
	Field(4, "url", String, "The public URL for accessing the Application", func() {
		Example("http://fuseml.example.org/mlflow-seldon-predictor-01/predict")
	})
	Field(5, "workflow", String, "Name of the Workflow used to create Application", func() {
		Example("mlflow-seldon-e2e")
	})
	Field(6, "k8s_resources", ArrayOf(KubernetesResource), "Kubernetes resources describing the Application")
	Field(7, "k8s_namespace", String, "Kubernetes namespace where the resources are located", func() {
		Example("fuseml-workloads")
	})

	Required("name", "type", "url", "workflow", "k8s_namespace")
})

// KubernetesResource describes the Kubernetes resource
var KubernetesResource = Type("KubernetesResource", func() {
	Field(1, "name", String, "The name of the Kubernetes resource", func() {
		Example("serving-pod-01")
	})
	Field(2, "kind", String, "The kind of Kubernetes resource", func() {
		Example("Pod")
	})
	Required("name", "kind")
})
